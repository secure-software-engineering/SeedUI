diff --git a/input.c b/input.c
index a1063a38..9c8a7152 100644
--- a/input.c
+++ b/input.c
@@ -22,6 +22,7 @@
 
 #include "input.h"
 
+#include <bits/time.h>
 #include <dirent.h>
 #include <errno.h>
 #include <fcntl.h>
@@ -37,6 +38,7 @@
 #include <unistd.h>
 
 #include "fuzz.h"
+#include "honggfuzz.h"
 #include "libhfcommon/common.h"
 #include "libhfcommon/files.h"
 #include "libhfcommon/log.h"
@@ -320,21 +322,47 @@ bool input_parseBlacklist(honggfuzz_t* hfuzz) {
     return true;
 }
 
-static void input_generateFileName(dynfile_t* dynfile, const char* dir, char fname[PATH_MAX]) {
+long long current_timestamp() {
+    struct timespec spec;
+    clock_gettime(CLOCK_REALTIME, &spec);
+    return (long long)spec.tv_sec * 1000 + (long long)spec.tv_nsec / 1000000;
+}
+
+static void input_generateFileName(dynfile_t* dynfile, const char* dir, char fname[PATH_MAX], run_t* run) {
     uint64_t crc64f = util_CRC64(dynfile->data, dynfile->size);
     uint64_t crc64r = util_CRC64Rev(dynfile->data, dynfile->size);
+    char     src_str[24];
+    char     cycle_prefix[24] = "";
+
+    if (dynfile->src) {
+        snprintf(src_str, sizeof(src_str), ",src:%zu", dynfile->src->idx);
+        strcpy(cycle_prefix, "cycle:0,");
+    } else {
+        snprintf(src_str, sizeof(src_str), ",orig");
+    }
+    
     if (dir) {
-        snprintf(fname, PATH_MAX, "%s/%016" PRIx64 "%016" PRIx64 ".%08" PRIx32 ".honggfuzz.cov",
-            dir, crc64f, crc64r, (uint32_t)dynfile->size);
+        snprintf(fname, PATH_MAX,
+            "%s/%s"
+            "id:%zu%s,executed_on:%lld,edges_found:%lu,%"
+            "016" PRIx64 "%016" PRIx64 ".%08" PRIx32 ".honggfuzz.cov",
+            dir, cycle_prefix, dynfile->idx, src_str, current_timestamp(),
+            run->global->feedback.hwCnts.softCntEdge, crc64f, crc64r,
+            (uint32_t)dynfile->size);
     } else {
-        snprintf(fname, PATH_MAX, "%016" PRIx64 "%016" PRIx64 ".%08" PRIx32 ".honggfuzz.cov",
-            crc64f, crc64r, (uint32_t)dynfile->size);
+        snprintf(fname, PATH_MAX,
+            "%s"
+            "id:%zu%s,executed_on:%lld,edges_found:%lu,%"
+            "016" PRIx64 "%016" PRIx64 ".%08" PRIx32 ".honggfuzz.cov",
+            cycle_prefix, dynfile->idx, src_str, current_timestamp(),
+            run->global->feedback.hwCnts.softCntEdge, crc64f, crc64r,
+            (uint32_t)dynfile->size);
     }
 }
 
-bool input_writeCovFile(const char* dir, dynfile_t* dynfile) {
+bool input_writeCovFile(const char* dir, dynfile_t* dynfile, run_t* run) {
     char fname[PATH_MAX];
-    input_generateFileName(dynfile, dir, fname);
+    input_generateFileName(dynfile, dir, fname, run);
 
     if (files_exists(fname)) {
         LOG_D("File '%s' already exists in the output corpus directory '%s'", fname, dir);
@@ -384,11 +412,9 @@ void input_addDynamicInput(run_t* run) {
     }
     dynfile->phase    = fuzz_getState(run->global);
     dynfile->timedout = run->tmOutSignaled;
-    input_generateFileName(dynfile, NULL, dynfile->path);
 
-    MX_SCOPED_RWLOCK_WRITE(&run->global->mutex.dynfileq);
 
-    dynfile->idx = ATOMIC_PRE_INC(run->global->io.dynfileqCnt);
+ 
 
     run->global->feedback.maxCov[0] = HF_MAX(run->global->feedback.maxCov[0], dynfile->cov[0]);
     run->global->feedback.maxCov[1] = HF_MAX(run->global->feedback.maxCov[1], dynfile->cov[1]);
@@ -397,6 +423,12 @@ void input_addDynamicInput(run_t* run) {
 
     run->global->io.dynfileqMaxSz = HF_MAX(run->global->io.dynfileqMaxSz, dynfile->size);
 
+    input_generateFileName(dynfile, NULL, dynfile->path, run);
+
+    MX_SCOPED_RWLOCK_WRITE(&run->global->mutex.dynfileq);
+
+    dynfile->idx = ATOMIC_PRE_INC(run->global->io.dynfileqCnt);
+
     /* Sort it by coverage - put better coverage earlier in the list */
     dynfile_t* iter = NULL;
     TAILQ_FOREACH_HF (iter, &run->global->io.dynfileq, pointers) {
@@ -416,7 +448,7 @@ void input_addDynamicInput(run_t* run) {
 
     const char* outDir =
         run->global->io.outputDir ? run->global->io.outputDir : run->global->io.inputDir;
-    if (!input_writeCovFile(outDir, dynfile)) {
+    if (!input_writeCovFile(outDir, dynfile, run)) {
         LOG_E("Couldn't save the coverage data to '%s'", run->global->io.outputDir);
     }
 
@@ -427,7 +459,7 @@ void input_addDynamicInput(run_t* run) {
 
     ATOMIC_POST_INC(run->global->io.newUnitsAdded);
 
-    if (run->global->io.covDirNew && !input_writeCovFile(run->global->io.covDirNew, dynfile)) {
+    if (run->global->io.covDirNew && !input_writeCovFile(run->global->io.covDirNew, dynfile, run)) {
         LOG_E("Couldn't save the new coverage data to '%s'", run->global->io.covDirNew);
     }
 }
diff --git a/input.h b/input.h
index d812036c..eb705a78 100644
--- a/input.h
+++ b/input.h
@@ -38,7 +38,7 @@ extern bool           input_init(honggfuzz_t* hfuzz);
 extern bool           input_parseDictionary(honggfuzz_t* hfuzz);
 extern void           input_freeDictionary(honggfuzz_t* hfuzz);
 extern bool           input_parseBlacklist(honggfuzz_t* hfuzz);
-extern bool           input_writeCovFile(const char* dir, dynfile_t* dynfile);
+extern bool           input_writeCovFile(const char* dir, dynfile_t* dynfile, run_t* run);
 extern void           input_addDynamicInput(run_t* run);
 extern bool           input_inDynamicCorpus(run_t* run, const char* fname, size_t len);
 extern void           input_renumerateInputs(honggfuzz_t* hfuzz);
